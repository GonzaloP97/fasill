<div class="container py-2 px-0"><h4 id=",/2"><a href="/fasill/documentation/ref/control-constructs#,/2">,/2</a></h4><p class="text-secondary">Conjunction.</p><?php echo show_template("','(X,Y)"); ?><p><?php echo show_description("','(First, Second) is true if and only if First is true and Second is true."); ?></p></div>
<div class="container py-2 px-0"><h4 id=";/2"><a href="/fasill/documentation/ref/control-constructs#;/2">;/2</a></h4><p class="text-secondary">Disjunction.</p><?php echo show_template("';'(X,Y)"); ?><p><?php echo show_description("';'(Either, Or) is true if and only if either Either or Or is true."); ?></p></div>
<div class="container py-2 px-0"><h4 id="throw/1"><a href="/fasill/documentation/ref/control-constructs#throw/1">throw/1</a></h4><p class="text-secondary">Raise an exception.</p><?php echo show_template("throw( +term )"); ?><p><?php echo show_description("throw(Exception) raise the Exception exception. The system looks for the innermost catch/3 ancestor for which Exception unifies with the Catcher argument of the catch/3 call."); ?></p></div>
<div class="container py-2 px-0"><h4 id="catch/3"><a href="/fasill/documentation/ref/control-constructs#catch/3">catch/3</a></h4><p class="text-secondary">Enable recovery from exceptions.</p><?php echo show_template("catch( +callable_term, ?term, +callable_term )"); ?><p><?php echo show_description("catch(Goal, Catcher, Handler) behaves as call/1 if no exception is raised when executing Goal. If an exception is raised using throw/1 while Goal executes, and the Goal is the innermost goal for which Catcher unifies with the argument of throw/1, all choice points generated by Goal are cut, the system backtracks to the start of catch/3 while preserving the thrown exception term, and Handler is called as in call/1."); ?></p></div>